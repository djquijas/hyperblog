Esta es la historia de Diego Quijas.
Diego Quijas nació de Mexico y tiene 29 años

Ya no se que poner.

Hoy hablaremos de su historia.

git init = inicia el lugar de trabajo de git
git status = Muestra el status de los archivos
git add . = Agrega todos los archivos al stage
git add <archivo> = Agrega un archivo en especifico al stage
git rm --cached <archivo> = Elimina el archivo del stage
git log <archivo> = Muestra el historial de los commit
git commit -m "Mensaje" = Hace un commit a los archivos que se agregaron al stage
git show <archivo> = Muestra los cambios que ha tenido el archivo en comparacion del ultimo git
                     con el git anterior.
git diff <id1> <id2> = Muestra las diferencias entre dos commits .
git reset <id> --hard = Regresa a la version anterior que se selecciono, eliminando todo lo antenrior
git reset <id> --soft = Regresa a la version anterrior que se selecciono, pero dejando en staging lo que se tenia
git checkout <id> <archivo.name> = Regresa a la version seleccionada, y elimina lo anterior hasta que se
                                   realiza un commit.

git rm --force: Elimina los archivos de Git y del disco duro. 
                Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, 
                de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

git reset
Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

Este comando es muy peligroso y debemos emplearlo solo en caso de emergencia. Recuerda que debemos usar alguna de estas dos opciones:

Hay dos formas de utilizar git reset: con el argumento --hard, borrando toda la información que tengamos en el área de staging (y perdiendo todo para siempre). 
                                      O, un poco más seguro, con el argumento --soft, que mantiene allí los archivos del área de staging para que podamos aplicar 
                                      nuestros últimos cambios pero desde un commit anterior.

git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
¡Pero todavía falta algo!

git reset HEAD: Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, 
                a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

Despues de hacer git log, y el resultado sea muy grande, para salir se tiene que orpimir "q"

git commit -am "mensaje" = Se utiliza para hacer automaticamente el add y commit en la misma linea

git branch <nombre> = Crea nueva rama de trabajo
git checkout <nombre rama> = Se cambia a la rama que se necesite
git branch = Muestra las ramas que existen
git merge <branch> = Fuciona las ramas, en la que estas actualmente y la que eliges
git remote add origin <direccion repositorio> = Agrega el repositorio Git a un repositorio remoto (GitHub)
git remote =
git remote -v =
git push origin master = envia al origen lo que contiene master
git pull origin master = trae al master el contenido del origen
git remote set-url origin <link> = cambia el origen del repositorio remoto

git log --all --decorate --graph --oneline = Muestra todos los commits hechos comprimidos y graficamente

alias <nombre>="comando git" : Crea un alias para comando largos, y los guarda
git tag -a <version que quieras> -m "mensaje" <hash donde se actualizara>
git show-ref --tags = Muestra el hash que hace referencia al tag
git push --tags = Envia los tags a GitHub
git tag -d <nombre del tag> = Elimina un tag